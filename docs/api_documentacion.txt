API ESPACIOS DEPORTIVOS - DOCUMENTACION
=======================================

Contexto general
- Prefijo HTTP: todas las rutas viven bajo /api/v1. En Swagger se listan como /api/... pero la app aplica prefijo api y version URI v1.
- Seguridad: se declara un esquema Bearer JWT global. Sin embargo, solo las rutas decoradas con @Auth(...) o @UseGuards(AuthGuard, RolesGuard) exigen token y roles. El resto queda publico.
- Roles (TipoRol): ADMIN, CLIENTE, DUENIO, CONTROLADOR. RolesGuard siempre acepta ADMIN y los roles especificados en @Auth.
- Subir archivos: POST /fotos/upload/:id usa multipart/form-data con un campo image.
- Observacion: TrabajaController.findAll no expone endpoint porque carece de decorador HTTP; cualquier consumo debe ajustarse a lo que hoy esta disponible.

----------------------------------------------------------------------
AUTENTICACION (auth module)
Entidades:
- AuthToken (tabla auth_tokens)
  * id (uuid, PK).
  * userId (int) FK a usuarios.id_usuario.
  * type (enum PASSWORD_RESET | EMAIL_VERIFICATION).
  * tokenHash (varchar 128, unico).
  * expiresAt (timestamp).
  * consumedAt (timestamp nullable).
  * requestIp (varchar 64 nullable).
  * userAgent (varchar 512 nullable).
  * createdAt, updatedAt (timestamps gestionados por TypeORM).

Endpoints (/auth):
- POST /auth/register - Permisos: publico. Registra un usuario con rol cliente usando RegisterDto.
- POST /auth/login - Permisos: publico, limitado por Throttle (bucket login). Devuelve accessToken, refreshToken (en cookie) y datos basicos del usuario.
- POST /auth/refresh - Permisos: publico. Usa la cookie refreshToken para emitir un nuevo par de tokens.
- POST /auth/logout - Permisos: JWT valido (AuthGuard). Revoca el refresh token del usuario autenticado.
- POST /auth/password/reset/request - Permisos: publico. Genera token de reseteo y (segun entorno) lo devuelve en la respuesta.
- POST /auth/password/reset/confirm - Permisos: publico. Valida token y cambia contrasena.
- POST /auth/email/verification/request - Permisos: publico. Solicita token de verificacion de correo.
- POST /auth/email/verification/confirm - Permisos: publico. Confirma la verificacion de correo.
- GET /auth/profile - Permisos: JWT con roles ADMIN, CLIENTE, DUENIO, CONTROLADOR. Devuelve payload activo del usuario.

----------------------------------------------------------------------
PERSONAS (personas)
Entidad Persona (tabla personas)
- id_persona (int, PK autogenerado).
- nombres, paterno, materno (varchar 100).
- documento_tipo (enum CC|CE|TI|PP, nullable).
- documento_numero (varchar 20, nullable).
- telefono (varchar 15) y telefono_verificado (boolean).
- fecha_nacimiento (date).
- genero (enum MASCULINO|FEMENINO|OTRO).
- url_foto (text nullable).
- creado_en, actualizado_en (timestamps).
- eliminado_en (timestamp soft delete).
- Relaciones: duenio (OneToOne), controlador[], cliente[].

Endpoints (/personas):
- POST /personas - Publico. Alta via CreatePersonaDto.
- GET /personas - Permisos: JWT ADMIN. Soporta filtros ?nombre o ?genero.
- GET /personas/count - Permisos: JWT ADMIN. Total de registros.
- GET /personas/documento/:documento_numero - Permisos: JWT ADMIN. Busca por documento.
- GET /personas/:id - Permisos: JWT ADMIN.
- PATCH /personas/:id - Permisos: JWT ADMIN. Actualiza datos.
- DELETE /personas/:id - Permisos: JWT ADMIN. Soft delete.

----------------------------------------------------------------------
USUARIOS (usuarios)
Entidad Usuario (tabla usuarios)
- id_usuario (int, PK autogenerado).
- id_persona (int) con relacion OneToOne eager a Persona.
- usuario (varchar 50, unico).
- correo (varchar 255, unico) y correo_verificado (boolean).
- hash_contrasena (varchar 255, oculto en selects).
- hash_refresh_token (varchar 512 nullable, oculto).
- estado (enum ACTIVO|INACTIVO|BLOQUEADO|PENDIENTE).
- creado_en, actualizado_en (timestamps) y ultimo_acceso_en (timestamp nullable).
- Relaciones: roles (lista UsuarioRol).

Endpoints (/usuarios) - Nota: no hay @Auth; actualmente son publicos.
- POST /usuarios - Crea usuario (devuelve datos sin hash_contrasena).
- GET /usuarios - Lista paginada (usa PaginationQueryDto, cache 60s).
- GET /usuarios/count - Total de usuarios.
- GET /usuarios/correo/:correo - Busca por correo.
- GET /usuarios/persona/:id_persona - Busca por persona.
- GET /usuarios/:id - Obtiene usuario.
- PATCH /usuarios/:id - Actualiza.
- DELETE /usuarios/:id - Soft delete.
- POST /usuarios/:id/ultimo-acceso - Marca ultimo_acceso_en al momento actual.

----------------------------------------------------------------------
ROLES (roles)
Entidad Rol (tabla roles)
- id_rol (int, PK).
- rol (enum ADMIN|CLIENTE|DUENIO|CONTROLADOR, default CLIENTE).
- Relaciones: usuarioRoles[].

Endpoints (/roles) - Clase decorada con @Auth([ADMIN]); requiere JWT rol admin.
- POST /roles - Crea rol nuevo.
- GET /roles - Lista roles.
- GET /roles/:id - Obtiene rol.
- PATCH /roles/:id - Actualiza.
- PATCH /roles/restore/:id - Restaura soft delete.
- DELETE /roles/:id - Soft delete.

----------------------------------------------------------------------
RELACION USUARIO-ROL (usuario-rol)
Entidad UsuarioRol (tabla usuarios_rol)
- PK compuesta: id_usuario, id_rol.
- FK a Usuario y Rol.
- asignado_en (timestamp default now).
- revocado_en (timestamp nullable) y eliminado_en (soft delete).

Endpoints (/usuario-rol) - Publicos (sin guardas).
- POST /usuario-rol - Asigna rol a usuario.
- GET /usuario-rol - Lista asignaciones.
- GET /usuario-rol/:id_usuario/:id_rol - Obtiene asignacion puntual.
- PATCH /usuario-rol/:id_usuario/:id_rol - Actualiza (permite revocar).
- PATCH /usuario-rol/restore/:id_usuario/:id_rol - Restaura asignacion.
- DELETE /usuario-rol/:id_usuario/:id_rol - Elimina (soft).

----------------------------------------------------------------------
CLIENTES (clientes)
Entidad Cliente (tabla cliente)
- id_cliente (int, PK manual, coincide con persona).
- Relacion OneToOne eager con Persona.
- apodo (varchar 100 nullable).
- nivel (int, default 1).
- observaciones (text nullable).
- Relaciones: participaciones[], cancelaciones[], reservas[], calificaciones[], denuncias[].

Endpoints (/clientes) - Publicos.
- POST /clientes - Alta de cliente (requiere CreateClienteDto).
- GET /clientes - Lista clientes.
- GET /clientes/:id - Obtiene cliente.
- PATCH /clientes/:id - Actualiza.
- DELETE /clientes/:id - Soft delete.

----------------------------------------------------------------------
DUENIOS (duenio)
Entidad Duenio (tabla duenio)
- id_persona_d (int, PK, igual a persona).
- Relacion OneToOne eager con Persona.
- verificado (boolean) y verificado_en (timestamp).
- imagen_ci, imagen_facial (varchar 100).
- creado_en, actualizado_en, eliminado_en.
- Relaciones: sedes[].

Endpoints (/duenio)
- POST /duenio - Permisos: JWT ADMIN o CLIENTE. Convierte cliente/persona en duenio.
- GET /duenio - Permisos: JWT ADMIN.
- GET /duenio/:id - Permisos: JWT ADMIN.
- PATCH /duenio/:id - Permisos: JWT ADMIN.
- PATCH /duenio/restore/:id - Permisos: JWT ADMIN.
- DELETE /duenio/:id - Permisos: JWT ADMIN.

----------------------------------------------------------------------
SEDES (sede)
Entidad Sede
- id_sede (int, PK autogenerado).
- id_persona_d (int) FK a Duenio.
- nombre, descripcion, direccion, latitud, longitud, telefono, email, politicas, estado (varchar 100).
- NIT, licencia_funcionamiento (varchar 100).
- creado_en, actualizado_en, eliminado_en.
- Relaciones: canchas[] (eager), calificaciones[], denuncias[], trabaja[].

Endpoints (/sede) - Clase con @Auth([ADMIN, DUENIO]); todos exigen JWT con rol admin o duenio.
- POST /sede - Crea sede.
- GET /sede - Lista sedes (incluye canchas eager).
- GET /sede/:id - Detalle.
- PATCH /sede/:id - Actualiza.
- PATCH /sede/restore/:id - Restaura soft delete.
- DELETE /sede/:id - Soft delete.

----------------------------------------------------------------------
CANCHAS (cancha)
Entidad Cancha
- id_cancha (int, PK autogenerado).
- id_sede (int) FK a Sede.
- nombre, superficie, dimensiones, reglas_uso, iluminacion, estado (varchar 100).
- cubierta (boolean).
- aforoMax (int).
- precio (decimal 10,2).
- creado_en, actualizado_en, eliminado_en.
- Relaciones: parte[], fotos[], reservas[], calificaciones[], denuncias[].

Endpoints (/cancha)
- POST /cancha - Permisos: JWT ADMIN o DUENIO.
- GET /cancha - Publico.
- GET /cancha/:id - Publico.
- PATCH /cancha/:id - Permisos: JWT ADMIN o DUENIO.
- PATCH /cancha/restore/:id - Permisos: JWT ADMIN o DUENIO.
- DELETE /cancha/:id - Permisos: JWT ADMIN o DUENIO.

----------------------------------------------------------------------
FOTOS (fotos)
Entidad Foto (tabla foto)
- id_foto (int, PK).
- id_cancha (int) FK a Cancha.
- url_foto (varchar 100).

Endpoints (/fotos) - Controlador con @Auth([ADMIN, DUENIO]); requiere JWT rol admin o duenio.
- POST /fotos/upload/:id - Sube archivo (campo image) y crea registro asignado a la cancha id.
- POST /fotos - Crea registro manual via JSON (CreateFotoDto).
- GET /fotos - Lista (restringido).
- GET /fotos/:id - Detalle.
- GET /fotos/cancha/:id_cancha - Lista por cancha.
- PATCH /fotos/:id - Actualiza cargando imagen nueva.
- DELETE /fotos/:id - Elimina.

----------------------------------------------------------------------
DISCIPLINAS (disciplina)
Entidad Disciplina
- id_disciplina (int PK).
- nombre, categoria, descripcion (varchar 100).
- creado_en, actualizado_en, eliminado_en.
- Relacion: parte[].

Endpoints (/disciplina) - @Auth([ADMIN]).
- POST /disciplina - Crear.
- GET /disciplina - Listar.
- GET /disciplina/:id - Detalle.
- PATCH /disciplina/:id - Actualizar.
- PATCH /disciplina/restore/:id - Restaurar.
- DELETE /disciplina/:id - Eliminar.

----------------------------------------------------------------------
PARTE (relacion cancha-disciplina) (parte)
Entidad Parte
- PK compuesta: id_disciplina, id_cancha.
- FK a Disciplina (eager) y Cancha.
- eliminado_en (soft delete).

Endpoints (/parte) - @Auth([ADMIN, DUENIO]).
- POST /parte - Crea relacion.
- GET /parte - Lista (interna en servicio).
- GET /parte/:id_cancha/:id_disciplina - Detalle.
- PATCH /parte/:id_cancha/:id_disciplina - Actualiza.
- DELETE /parte/:id_cancha/:id_disciplina - Elimina.

----------------------------------------------------------------------
RESERVAS (reservas)
Entidad Reserva
- id_reserva (int PK).
- id_cliente (int) FK a Cliente.
- id_cancha (int) FK a Cancha.
- inicia_en, termina_en (timestamp).
- cantidad_personas (int).
- requiere_aprobacion (boolean).
- monto_base, monto_extra, monto_total (float).
- creado_en, actualizado_en, eliminado_en.
- estado (varchar, default Pendiente).
- Relaciones: participaciones[], cancelaciones[], controla[], pasesAcceso[], transacciones[].

Endpoints (/reservas)
- POST /reservas - JWT ADMIN, DUENIO, CLIENTE. Valida existencia de cancha y cliente y bloquea solapamientos.
- GET /reservas - JWT ADMIN.
- GET /reservas/usuario/:id_cliente - JWT ADMIN o CLIENTE. Devuelve reservas del cliente.
- GET /reservas/cancha/:canchaId - JWT ADMIN o DUENIO.
- GET /reservas/duenio/:duenioId - JWT ADMIN o DUENIO.
- GET /reservas/:id - JWT ADMIN, CLIENTE, DUENIO.
- PATCH /reservas/:id - JWT ADMIN o CLIENTE. Modifica reserva.
- PATCH /reservas/:id/cancelar - JWT ADMIN o CLIENTE. Cancela e incluye motivo opcional.
- DELETE /reservas/:id - JWT ADMIN. Soft delete.

----------------------------------------------------------------------
PARTICIPA (participa)
Entidad Participa
- PK compuesta: id_reserva, id_cliente.
- confirmado (boolean).
- check_in_en (timestamp nullable).
- Relaciones: FK a Reserva y Cliente.

Endpoints (/participa) - Publicos.
- POST /participa - Crea participante.
- GET /participa/:id_reserva/:id_cliente - Obtiene participante.
- PATCH /participa/:id_reserva/:id_cliente - Actualiza confirmacion o check-in.
- DELETE /participa/:id_reserva/:id_cliente - Elimina.

----------------------------------------------------------------------
PASES DE ACCESO (pases-acceso)
Entidad PasesAcceso
- id_pase_acceso (int PK).
- FK reserva (ManyToOne).
- hash_code (varchar 200).
- valido_desde, valido_hasta (timestamp).
- estado (varchar 100).
- creado_en (timestamp).
- Relaciones: controla[].

Endpoints (/pases-acceso) - Publicos.
- POST /pases-acceso - Crea pase.
- GET /pases-acceso - Lista.
- GET /pases-acceso/:id - Detalle.
- PATCH /pases-acceso/:id - Actualiza.
- DELETE /pases-acceso/:id - Elimina.

----------------------------------------------------------------------
CONTROLADORES (controlador)
Entidad Controlador
- id_persona_ope (int PK, coincide con persona).
- FK a Persona.
- codigo_empleado (varchar 100).
- activo (boolean).
- turno (varchar 100).
- Relaciones: controla[], trabaja[].

Endpoints (/controlador) - Publicos.
- POST /controlador - Alta.
- GET /controlador - Lista.
- GET /controlador/:id - Detalle.
- PATCH /controlador/:id - Actualiza.
- DELETE /controlador/:id - Soft delete.

----------------------------------------------------------------------
CONTROL DE ACCESOS (controla)
Entidad Controla
- PK compuesta: id_persona_ope, id_reserva, id_pase_acceso.
- accion (string), resultado (string), fecha (timestamp default now).
- Relaciones: FK a Controlador, Reserva, PasesAcceso.

Endpoints (/controla) - Publicos.
- POST /controla - Registra accion (p.ej. check-in).
- GET /controla - Lista (todas las relaciones).
- GET /controla/:id_persona_ope/:id_reserva/:id_pase_acceso - Detalle.
- PATCH /controla/:... - Actualiza resultado/accion.
- DELETE /controla/:... - Elimina.

----------------------------------------------------------------------
TRABAJA (trabaja)
Entidad Trabaja
- PK compuesta: id_persona_ope, id_sede.
- FK a Controlador y Sede.
- fecha_inicio (date), fecha_fin (date nullable), activo (boolean).

Endpoints (/trabaja) - Clase con @UseGuards(AuthGuard, RolesGuard).
- POST /trabaja - Permisos: JWT roles DUENIO o ADMIN. Crea asignacion controlador-sede.
- GET /trabaja/:id_persona_ope/:id_sede - Permisos: cualquier usuario autenticado (no hay @Roles). Devuelve la asignacion.
- PATCH /trabaja/:id_persona_ope/:id_sede - Permisos: roles DUENIO o ADMIN. Actualiza fechas o estado.
- DELETE /trabaja/:id_persona_ope/:id_sede - Permisos: roles DUENIO o ADMIN. Elimina.
- Nota: el metodo findAll carece de decorador @Get; por ahora no existe endpoint listado.

----------------------------------------------------------------------
RESERVA - CANCELACION (cancelacion)
Entidad Cancelacion
- id_cancelacion (int PK).
- id_cliente, id_reserva (FK).
- cancelada_en (timestamp default now).
- motivo (text nullable), canal (varchar 50 nullable).
- Relaciones: cliente, reserva.

Endpoints (/cancelaciones) - Publicos.
- POST /cancelaciones - Registra cancelacion vinculada a reserva.
- GET /cancelaciones - Lista.
- GET /cancelaciones/:id - Detalle.
- PATCH /cancelaciones/:id - Actualiza (motivo, canal, etc.).
- DELETE /cancelaciones/:id - Elimina.

----------------------------------------------------------------------
TRANSACCIONES (transacciones)
Entidad Transaccion
- id_transaccion (int PK).
- FK reserva.
- pasarela, metodo, estado, id_externo, codigo_autorizacion (varchar).
- monto, comision_pasarela, comision_plataforma (decimal 10,2).
- moneda_liquidada (varchar 40).
- creado_en, capturado_en, rembolsado_en (timestamps).

Endpoints (/transacciones) - Publicos.
- POST /transacciones - Crea registro de pago.
- GET /transacciones - Lista.
- GET /transacciones/:id - Detalle.
- PATCH /transacciones/:id - Actualiza.
- DELETE /transacciones/:id - Elimina.

----------------------------------------------------------------------
CALIFICACIONES DE CANCHA (califica-cancha)
Entidad CalificaCancha
- PK compuesta: id_cliente, id_cancha, id_sede.
- FK a Cliente, Cancha, Sede.
- puntaje (number).
- dimensiones (string), comentario (string).
- creada_en (timestamp default now).

Endpoints (/califica-cancha) - Publicos.
- POST /califica-cancha - Crea calificacion.
- GET /califica-cancha - Lista todas.
- GET /califica-cancha/cancha/:id_cancha - Lista por cancha.
- GET /califica-cancha/:id_cliente/:id_cancha/:id_sede - Detalle.
- PATCH /califica-cancha/:... - Actualiza.
- DELETE /califica-cancha/:... - Elimina.

----------------------------------------------------------------------
DENUNCIAS (denuncia)
Entidad Denuncia
- PK compuesta: id_cliente, id_cancha, id_sede.
- FK a Cliente, Cancha, Sede.
- categoria, gravedad (varchar 50).
- estado (varchar 30, default pendiente).
- titulo (varchar 120).
- descripcion (text nullable).
- asignado_a (varchar 120 nullable).
- creado_en, actualizado_en.

Endpoints (/denuncia) - Publicos.
- POST /denuncia - Crea denuncia.
- GET /denuncia - Lista.
- GET /denuncia/:id_cliente/:id_cancha/:id_sede - Detalle.
- PATCH /denuncia/:... - Actualiza (estado, asignacion, etc.).
- DELETE /denuncia/:... - Elimina.

----------------------------------------------------------------------
FICHAS DE CLIENTE (participa, cancelacion, califica-cancha, denuncia) ya descritas; considerar interrelaciones al diseñar reportes.

----------------------------------------------------------------------
MONITOREO Y SALUD
- GET /health - Publico. Ejecuta HealthCheckService con TypeOrmHealthIndicator para verificar la base de datos.
- GET /metrics - Publico. Expuesto por PrometheusModule; devuelve metricas en formato Prometheus (texto plano).

----------------------------------------------------------------------
RESUMEN DE PERMISOS
- Publicas: la mayoria de rutas sin @Auth, incluye usuarios, clientes, reservas auxiliares, etc. Considere agregar proteccion si se despliega en produccion.
- JWT sin restriccion de rol: POST /auth/logout, endpoints de Trabaja sin @Roles (solo GET /trabaja/...).
- JWT con roles: ver secciones de Sede, Cancha (solo mutaciones), Reservas (segun caso), Duenio, Disciplina, Roles, Fotos, Parte, Trabaja (mutaciones), Auth profile.

Este archivo se basa en la revision del codigo fuente al 2025-10-26 (src carpeta) y refleja las relaciones TypeORM y decoradores NestJS vigentes.
