DOCUMENTACIÓN API - Estructura de datos para el frontend

Resumen
-------
Este documento describe las entidades, campos, tipos, relaciones y ejemplos mínimos de request/response que el frontend necesita para integrarse con el backend.

Convenciones
-----------
- Los nombres de tablas provienen de `estructa.json` y se listan con el nombre de la entidad.
- Tipo: se respeta el tipo indicado en el JSON.
- Campos marcados con `PK` son claves primarias. `FK` indica claves foráneas y a qué entidad refieren.
- Campos con `|null` son opcionales en respuestas.
- Fechas/timestamps vienen en ISO 8601 (por ejemplo: 2023-08-01T12:00:00Z).
- Los endpoints sugeridos usan REST y convención: /api/{entidad}s. Ajustar según la ruta real del backend.

Entidades
---------

1) persona (`persona` / tabla `1_persona`)
- Descripción: datos personales básicos compartidos por usuarios, clientes, dueños y controladores.
- Campos:
  - idPersona: int (PK)
  - nombres: varchar(100)
  - paterno: varchar(100)
  - materno: varchar(100)
  - documentoTipo: enum['CC','CE','TI','PP'] | null
  - documentoNumero: varchar(20) | null
  - telefono: varchar(15)
  - telefonoVerificado: boolean (default:false)
  - fechaNacimiento: date
  - genero: enum['MASCULINO','FEMENINO','OTRO']
  - urlFoto: text | null
  - creadoEn: timestamp (createDate) - ISO 8601
  - actualizadoEn: timestamp (updateDate)
  - eliminadoEn: timestamp | null (soft delete)
- Relaciones: base para `usuarios`, `cliente`, `duenio`, `controlador`.
- Endpoints sugeridos:
  - GET /api/personas -> list
  - GET /api/personas/:id -> detail
  - POST /api/personas -> create
  - PUT/PATCH /api/personas/:id -> update
  - DELETE /api/personas/:id -> soft-delete
- Ejemplo response (GET /api/personas/1):
  {
    "idPersona": 1,
    "nombres": "Carlos",
    "paterno": "Perez",
    "materno": "Gomez",
    "telefono": "+571234567890",
    "genero": "MASCULINO",
    "urlFoto": null,
    "creadoEn": "2024-01-15T12:00:00Z"
  }


2) rol (`rol` / tabla `2_rol`)
- Descripción: roles de usuarios en el sistema.
- Campos:
  - idRol: int (PK)
  - rol: enum['ADMIN','DUENIO','CONTROLADOR','CLIENTE']
  - activo: boolean (default:true)
  - actualizadoEn: timestamp
  - eliminadoEn: timestamp | null (soft delete)
- Relaciones: vinculado en `usuarios_roles`.
- Endpoints sugeridos: /api/roles (GET, POST, PATCH, DELETE)


3) usuarios (`usuarios` / tabla `3_usuarios`)
- Descripción: credenciales y estado del usuario.
- Campos:
  - idUsuario: int (PK)
  - idPersona: int (FK -> persona.idPersona)
  - usuario: varchar(50) UNIQUE
  - correo: varchar(255) UNIQUE
  - correoVerificado: boolean (default:false)
  - hashContrasena: varchar(255) (select:false) -> no enviar al frontend
  - estado: enum['ACTIVO','INACTIVO','BLOQUEADO','PENDIENTE'] (default:'PENDIENTE')
  - creadoEn, actualizadoEn, ultimoAccesoEn
- Relaciones: persona (1:1).
- Notas de seguridad: nunca exponer `hashContrasena`. En endpoints de usuarios, respuesta debe omitir ese campo o marcarlo como select:false.
- Endpoints sugeridos: /api/usuarios, /api/auth/login, /api/auth/register
- Ejemplo response (omitido campos sensibles):
  {
    "idUsuario": 5,
    "idPersona": 2,
    "usuario": "carlosp",
    "correo": "carlos@example.com",
    "estado": "ACTIVO",
    "creadoEn": "2024-01-15T12:00:00Z"
  }


4) cliente (`cliente` / tabla `4_cliente`)
- Descripción: extensión de persona para clientes.
- Campos:
  - idCliente: int (PK=FK persona.idPersona)
  - apodo: varchar(100) | null
  - nivel: int (default:1)
  - observaciones: text | null
- Relaciones: persona 1:1
- Endpoints sugeridos: /api/clientes


5) duenio (`duenio` / tabla `5_duenio`)
- Descripción: dueños de sedes/canchas.
- Campos:
  - idPersonaD: int (PK=FK persona.idPersona)
  - verificado: boolean (default:false)
  - verificadoEn: timestamp | null
  - imagenCi: text | null
  - imgfacial: text | null
- Relaciones: persona 1:1, tiene muchas `sede`.
- Endpoints sugeridos: /api/duenios


6) controlador (`controlador` / tabla `6_controlador`)
- Descripción: operadores/encargados que controlan accesos.
- Campos:
  - idPersonaOpe: int (PK=FK persona.idPersona)
  - codigoEmpleado: varchar(100)
  - activo: boolean (default:true)
  - turno: varchar(100)
- Relaciones: persona 1:1, vinculado a `trabaja` y `controla`.
- Endpoints sugeridos: /api/controladores


7) sede (`sede` / tabla `7_sede`)
- Descripción: ubicación/empresa que agrupa canchas.
- Campos:
  - idSede: int (PK)
  - idPersonaD: int (FK -> duenio.idPersonaD)
  - nombre, descripcion, direccion, latitud, longitud, telefono, email
  - politicas, estado, NIT, LicenciaFuncionamiento
  - creadoEn, actualizadoEn, eliminadoEn
- Relaciones: pertenece a `duenio`, tiene muchas `cancha`, `trabaja`.
- Endpoints sugeridos: /api/sede (nota: en el repo las rutas usan `/api/sede`)
- Ejemplo response breve:
  {
    "idSede": 10,
    "idPersonaD": 4,
    "nombre": "Sede Centro",
    "direccion": "Calle 123"
  }


8) cancha (`cancha` / tabla `8_cancha`)
- Descripción: canchas disponibles para reserva.
- Campos:
  - idCancha: int (PK)
  - idSede: int (FK -> sede.idSede)
  - nombre, superficie, cubierta (boolean), aforoMax, dimensiones
  - reglasUso, iluminacion, estado, precio (decimal)
  - creadoEn, actualizadoEn, eliminadoEn
- Relaciones: pertenece a `sede`, tiene `foto`, puede estar en `parte` (relación con `disciplina`), reservas.
- Endpoints sugeridos: /api/cancha, /api/sede/:id/canchas
- Ejemplo response:
  {
    "idCancha": 3,
    "idSede": 10,
    "nombre": "Cancha A",
    "precio": 50.00
  }


9) disciplina (`disciplina` / tabla `9_disciplina`)
- Descripción: deportes o disciplinas asociadas a canchas.
- Campos: idDisciplina, nombre, categoria, descripcion, timestamps
- Relaciones: many-to-many con `cancha` a través de `parte`.
- Endpoints sugeridos: /api/disciplina


10) foto (`foto` / tabla `10_foto`)
- Descripción: urls de fotos por cancha.
- Campos: idFoto (PK), idCancha (FK), urlFoto
- Relaciones: cancha 1:n fotos
- Endpoints sugeridos: /api/fotos, /api/fotos/cancha/:idCancha


11) parte (`parte` / tabla `11_parte`)
- Descripción: tabla join entre `disciplina` y `cancha`.
- Campos: idDisciplina (FK), idCancha (FK), eliminadoEn
- Relaciones: disciplina <-> cancha (N:N)
- Endpoints sugeridos: integrarlo en `cancha` o `disciplina` endpoints para listar/añadir/quitar disciplinas de una cancha. El repo expone `/api/parte` endpoints.


12) usuarios_roles (`usuarios_roles` / tabla `12_usuarios_roles`)
- Descripción: asignación de roles a usuarios.
- Campos: idUsuario (FK), idRol (FK), asignadoEn, revocadoEn, eliminadoEn
- Relaciones: usuarios <-> rol (N:N)
- Endpoints sugeridos: /api/usuario-rol (el repo expone `/api/usuario-rol`)


13) reserva (`reserva` / tabla `13_reserva`)
- Descripción: reservas de canchas solicitadas por clientes.
- Campos:
  - idReserva: int (PK)
  - idCliente: int (FK -> cliente.idCliente)
  - idCancha: int (FK -> cancha.idCancha)
  - iniciaEn: timestamp
  - terminaEn: timestamp
  - cantidadPersonas: int
  - requiereAprobacion: boolean
  - montoBase, montoExtra, montoTotal
  - creadoEn, actualizadoEn, eliminadoEn
- Relaciones: cliente, cancha, pases_acceso, participa, transaccion, cancelacion
- Endpoints sugeridos: /api/reservas (POST para crear reserva, GET para listar, GET /:id detalle, PATCH para actualizar estado)
- Ejemplo request (POST /api/reservas):
  {
    "idCliente": 12,
    "idCancha": 3,
    "iniciaEn": "2025-10-20T18:00:00Z",
    "terminaEn": "2025-10-20T19:00:00Z",
    "cantidadPersonas": 6
  }


14) califica (`califica` / tabla `14_califica`)
- Descripción: calificaciones que hacen clientes a canchas.
- Campos: idCliente (FK), idCancha (FK), puntaje (numeric), dimensiones (varchar), comentario (varchar), creadaEn
- Relaciones: reserva/cliente/cancha
- Endpoints sugeridos: /api/califica-cancha (repo usa `/api/califica-cancha`) y /api/canchas/:id/calificaciones


15) denuncia (`denuncia` / tabla `15_denuncia`)
- Descripción: reportes de incidentes por clientes sobre canchas.
- Campos: idCliente, idCancha, categoria, gravedad, estado (default 'pendiente'), titulo, descripcion, asignadoA, creadoEn, actualizadoEn
- Relaciones: cliente, cancha
- Endpoints sugeridos: /api/denuncia (el repo usa `/api/denuncia`)


16) pases_acceso (`pases_acceso` / tabla `16_pases_acceso`)
- Descripción: pases o tickets que permiten el acceso a una reserva.
- Campos: idPaseAcceso (PK), idReserva (FK), hashCode, validoDesde, validoHasta, estado, creadoEn
- Relaciones: reserva (1:1 o 1:n)
- Endpoints sugeridos: /api/pases-acceso (el repo usa `/api/pases-acceso`) y /api/reservas/:id/pases
- Seguridad: `hashCode` se trata con cuidado; exponerlo sólo cuando corresponda (por ejemplo en QR)


17) controla (`controla` / tabla `17_controla`)
- Descripción: registros de acciones de los controladores al verificar pases.
- Campos: idPersonaOpe (FK), idReserva (FK), idPaseAcceso (FK), accion, resultado, fecha
- Relaciones: controlador, reserva, pases_acceso
- Endpoints sugeridos: /api/controla (el repo usa `/api/controla`)


18) trabaja (`trabaja` / tabla `18_trabaja`)
- Descripción: qué controladores trabajan en qué sedes y en qué periodos.
- Campos: idPersonaOpe (FK), idSede (FK), fechaInicio, fechaFin, activo
- Relaciones: controlador, sede
- Endpoints sugeridos: /api/trabaja (el repo usa `/api/trabaja`)


19) cancelacion (`cancelacion` / tabla `19_cancelacion`)
- Descripción: registros de cancelaciones de reservas por clientes.
- Campos: idCancelacion (PK), idCliente (FK), idReserva (FK), canceladaEn, motivo, canal
- Relaciones: cliente, reserva
- Endpoints sugeridos: /api/cancelaciones (el repo usa `/api/cancelaciones`)


20) participa (`participa` / tabla `20_participa`)
- Descripción: participantes confirmados para una reserva.
- Campos: idReserva (FK), idCliente (FK), confirmado (boolean), checkInEn
- Relaciones: reserva <-> cliente (N:N), con atributos
- Endpoints sugeridos: /api/participa (el repo usa `/api/participa`)


21) transaccion (`transaccion` / tabla `21_transaccion`)
- Descripción: movimientos de pago vinculados a reservas.
- Campos: idTransaccion (PK), idReserva (FK), pasarela, metodo, monto, estado, idExterno, comisionPasarela, comisionPlataforma, monedaLiquidada, codigoAutorizacion, creadoEn, capturadoEn, reembolsadoEn
- Relaciones: reserva
- Endpoints sugeridos: /api/transacciones (el repo usa `/api/transacciones`) y /api/reservas/:id/transacciones
- Notas: No exponer información sensible de pasarelas; almacenar `idExterno` y `codigoAutorizacion` según políticas de seguridad.


Formato estándar de respuesta
----------------------------
Para mantener consistencia, el backend devuelve normalmente un envelope con `status`, `data`, `error` y `meta` cuando aplica.
- Ejemplo éxito (lista paginada):
  {
    "status": "success",
    "data": [ ... ],
    "meta": {
      "page": 1,
      "limit": 20,
      "total": 123
    }
  }
- Ejemplo éxito (objeto):
  {
    "status": "success",
    "data": { ... }
  }
- Ejemplo error:
  {
    "status": "error",
    "error": {
      "code": 400,
      "message": "Correo inválido",
      "details": { "correo": "Formato no válido" }
    }
  }

Códigos de error y significados comunes
--------------------------------------
- 400 Bad Request: validaciones de campos fallaron (detalles en `error.details`).
- 401 Unauthorized: token ausente o inválido.
- 403 Forbidden: usuario autenticado sin permisos suficientes.
- 404 Not Found: recurso no encontrado.
- 409 Conflict: conflicto (por ejemplo, usuario o correo ya existe).
- 422 Unprocessable Entity: reglas de negocio (ej.: fecha de reserva en el pasado).
- 500 Internal Server Error: error inesperado en servidor.

Autenticación y permisos (roles)
--------------------------------
- Autenticación: el sistema usa JWT en la cabecera `Authorization: Bearer <token>`.
- Roles: `ADMIN`, `DUENIO`, `CONTROLADOR`, `CLIENTE`.
- Reglas recomendadas:
  - Rutas administrativas (crear/eliminar sedes, roles) -> `ADMIN`.
  - Gestión de sedes y canchas propias -> `DUENIO` (solo sobre sus sedes).
  - Validación/scan de pases -> `CONTROLADOR`.
  - Reservas y calificaciones -> `CLIENTE`.
- Endpoint para perfil: GET /api/auth/profile (devuelve usuario + persona + roles). Ejemplo:
  {
    "status": "success",
    "data": {
      "usuario": { "idUsuario": 5, "usuario": "carlosp", "correo": "carlos@example.com" },
      "persona": { "idPersona": 2, "nombres": "Carlos" },
      "roles": ["CLIENTE"]
    }
  }

Validaciones y reglas por campo (resumen)
-----------------------------------------
- `correo`: email válido, max length 255, unique.
- `usuario`: alfanumérico, max 50, unique.
- `telefono`: patrón E.164 recomendado, max 15.
- `fechaNacimiento`: fecha < hoy, usuario mayor de 12 años (ejemplo de regla).
- `precio`, `monto*`: >= 0, dos decimales.
- `iniciaEn`, `terminaEn`: `iniciaEn` < `terminaEn`, rango máximo configurable (ej: 6 horas), no solapamiento con reservas existentes (regla de negocio que el backend valida).
- `cantidadPersonas`: entero >=1 y <= aforoMax de cancha.
- Campos `enum`: aceptar solo valores listados (frontend puede usar select con esos valores).

DTOs JSON de ejemplo (requests comunes)
--------------------------------------
- Registro de usuario (POST /api/auth/register):
  {
    "usuario": "carlosp",
    "correo": "carlos@example.com",
    "contrasena": "Secret123!",
    "persona": {
      "nombres": "Carlos",
      "paterno": "Perez",
      "materno": "Gomez",
      "telefono": "+571234567890",
      "fechaNacimiento": "1990-05-10"
    }
  }

- Crear reserva (POST /api/reservas):
  {
    "idCliente": 12,
    "idCancha": 3,
    "iniciaEn": "2025-10-20T18:00:00Z",
    "terminaEn": "2025-10-20T19:00:00Z",
    "cantidadPersonas": 6
  }

- Crear sede (POST /api/sede) (ejemplo para dueños):
  {
    "idPersonaD": 4,
    "nombre": "Sede Norte",
    "direccion": "Av 45 # 123",
    "latitud": "4.7110",
    "longitud": "-74.0721",
    "telefono": "+571234567890",
    "email": "sedenorte@example.com",
    "politicas": "Devoluciones solo 24h antes"
  }

Interfaces TypeScript sugeridas (frontend)
-----------------------------------------
// Tipos básicos
interface Persona {
  idPersona: number;
  nombres: string;
  paterno: string;
  materno?: string;
  documentoTipo?: 'CC'|'CE'|'TI'|'PP'|null;
  documentoNumero?: string | null;
  telefono: string;
  telefonoVerificado?: boolean;
  fechaNacimiento: string; // ISO date
  genero: 'MASCULINO'|'FEMENINO'|'OTRO';
  urlFoto?: string | null;
  creadoEn?: string;
  actualizadoEn?: string;
}

interface Usuario {
  idUsuario: number;
  idPersona: number;
  usuario: string;
  correo: string;
  correoVerificado?: boolean;
  estado?: 'ACTIVO'|'INACTIVO'|'BLOQUEADO'|'PENDIENTE';
  creadoEn?: string;
}

interface Sede {
  idSede: number;
  idPersonaD: number;
  nombre: string;
  descripcion?: string;
  direccion?: string;
  latitud?: string;
  longitud?: string;
  telefono?: string;
  email?: string;
  politicas?: string;
  estado?: string;
}

interface Cancha {
  idCancha: number;
  idSede: number;
  nombre: string;
  superficie?: string;
  cubierta?: boolean;
  aforoMax?: number;
  dimensiones?: string;
  reglasUso?: string;
  iluminacion?: string;
  estado?: string;
  precio?: number;
}

interface Reserva {
  idReserva: number;
  idCliente: number;
  idCancha: number;
  iniciaEn: string; // ISO datetime
  terminaEn: string;
  cantidadPersonas: number;
  requiereAprobacion?: boolean;
  montoBase?: number;
  montoExtra?: number;
  montoTotal?: number;
}

Documentación avanzada y flujos
==============================

1) Query params y filtros estándar
---------------------------------
- Paginación:
  - `?page=1&limit=20` (página 1, 20 items)
  - `?offset=0&limit=20` (offset style)
- Ordenamiento:
  - `?sort=creadoEn:desc` o `?sort=precio:asc` (usar convención `campo:dir`)
- Inclusiones / relaciones (eager load):
  - `?include=persona,roles` -> incluir relaciones en la respuesta
- Filtros comunes:
  - `?idSede=10&estado=ACTIVO&from=2025-10-01&to=2025-10-31`
- Busquedas por texto:
  - `?q=cancha+futbol` (buscar en nombre/descripcion)

Ejemplo: GET /api/cancha?page=2&limit=10&sort=precio:asc&include=fotos,disciplina&q=futbol

2) Flujos de autenticación
--------------------------
- Login (POST /api/auth/login):
  - Request: { usuario|correo, contrasena }
  - Response: { token, refreshToken?, usuario } (token JWT corto, refresh token opcional)
- Refresh token (POST /api/auth/refresh):
  - Request: { refreshToken }
  - Response: { token, refreshToken }
- Logout (POST /api/auth/logout):
  - Invalidar refresh token en backend (si aplica).

Seguridad adicional:
- Usar HTTPS en producción.
- Short-lived access tokens + refresh tokens.
- Proteger rutas sensibles con RBAC (role-based access control).

3) Esquema de errores ampliado
-----------------------------
Estructura recomendada para `error`:
{
  "code": 1234,           // código interno (numérico)
  "http": 400,           // http status
  "message": "Mensaje legible",
  "details": { ... },    // validaciones campo a campo
  "timestamp": "..."
}
Códigos internos (ejemplos):
- 1000-1999: Autenticación/Autorización
- 2000-2999: Validaciones del usuario/inputs
- 3000-3999: Reservas y disponibilidad (negocios)
- 4000-4999: Pagos y transacciones

4) Interfaces TypeScript completas (todas las entidades)
--------------------------------------------------------
interface Rol {
  idRol: number;
  rol: 'ADMIN'|'DUENIO'|'CONTROLADOR'|'CLIENTE';
  activo?: boolean;
  actualizadoEn?: string;
  eliminadoEn?: string | null;
}

interface Cliente {
  idCliente: number;
  apodo?: string | null;
  nivel?: number;
  observaciones?: string | null;
}

interface Duenio {
  idPersonaD: number;
  verificado?: boolean;
  verificadoEn?: string | null;
  imagenCi?: string | null;
  imgfacial?: string | null;
}

interface Controlador {
  idPersonaOpe: number;
  codigoEmpleado?: string;
  activo?: boolean;
  turno?: string;
}

interface Disciplina {
  idDisciplina: number;
  nombre: string;
  categoria?: string;
  descripcion?: string;
  creadoEn?: string;
  actualizadoEn?: string;
}

interface Foto {
  idFoto: number;
  idCancha: number;
  urlFoto: string;
}

interface Parte {
  idDisciplina: number;
  idCancha: number;
  eliminadoEn?: string | null;
}

interface UsuariosRoles {
  idUsuario: number;
  idRol: number;
  asignadoEn?: string;
  revocadoEn?: string | null;
}

interface Califica {
  idCliente: number;
  idCancha: number;
  puntaje?: number;
  dimensiones?: string;
  comentario?: string;
  creadaEn?: string;
}

interface Denuncia {
  idCliente: number;
  idCancha: number;
  categoria?: string;
  gravedad?: string;
  estado?: string;
  titulo?: string;
  descripcion?: string | null;
  asignadoA?: string | null;
  creadoEn?: string;
  actualizadoEn?: string | null;
}

interface PaseAcceso {
  idPaseAcceso: number;
  idReserva: number;
  hashCode: string;
  validoDesde?: string;
  validoHasta?: string;
  estado?: string;
  creadoEn?: string;
}

interface Controla {
  idPersonaOpe: number;
  idReserva: number;
  idPaseAcceso: number;
  accion?: string;
  resultado?: string;
  fecha?: string;
}

interface Trabaja {
  idPersonaOpe: number;
  idSede: number;
  fechaInicio?: string;
  fechaFin?: string;
  activo?: boolean;
}

interface Cancelacion {
  idCancelacion: number;
  idCliente: number;
  idReserva: number;
  canceladaEn?: string;
  motivo?: string | null;
  canal?: string | null;
}

interface Participa {
  idReserva: number;
  idCliente: number;
  confirmado?: boolean;
  checkInEn?: string | null;
}

interface Transaccion {
  idTransaccion: number;
  idReserva: number;
  pasarela?: string;
  metodo?: string;
  monto?: number;
  estado?: string;
  idExterno?: string;
  comisionPasarela?: number;
  comisionPlataforma?: number;
  monedaLiquidada?: string;
  codigoAutorizacion?: string;
  creadoEn?: string;
  capturadoEn?: string;
  reembolsadoEn?: string | null;
}

5) Cache y performance (recomendaciones)
----------------------------------------
- Cachear listas públicas (sedes, disciplinas) por TTL (ej: 5-10 minutos).
- No cachear datos sensibles por usuario sin scoping (user-specific cache keys).
- Usar índices en BD para columnas filtradas frecuentemente: `idSede`, `idCancha`, `iniciaEn`.
- Optimizar consultas N+1 usando `include`/joins cuando aplique.

6) Rate limiting y protección
-----------------------------
- Aplicar rate limit por IP y por usuario en endpoints sensibles (login, pagos).
- Bloquear intentos repetidos y exigir CAPTCHA/2FA tras varios intentos fallidos.

7) Migraciones y soft-delete
----------------------------
- Varias tablas tienen `eliminadoEn` -> implementar restore endpoint si se requiere restauración: PATCH /api/{entity}/restore/:id
- Documentar migraciones cuando cambien enums para que el frontend muestre valores compatibles.

Fin - Documentación avanzada

Buenas prácticas para el frontend
---------------------------------
- Siempre validar en el cliente antes de enviar (formato de email, longitud, enums) y mostrar los errores devueltos por el backend.
- Para listas, usar paginación y caches (stale-while-revalidate) cuando sea posible.
- Mostrar estados de carga y errores de red (timeout, 5xx) con mensajes amigables.
- Manejar la expiración del token: si recibes 401, redirigir al login o refrescar token según flujo.

Fin de la documentación ampliada